#please do not leave a blank line if there still some lines below
#
#when use the rhythm of balance, the parameter is treated as the requesting count per second
#when use the rhythm of possion, the parameter is treated as the expected period(millisecond) of a poisson process
#granularity: in second, the period of one average data
#		Client client = new Client(0.3, Client.RHYTHM.POSSION, "1000",
#				Client.POPULARITY.ZIPF, "1.07");
#The instructions to create new client:
#1st param: the testing duration(in second), after this duration the whole process will be ended.
#2nd param: the rhythm of sending requests: Balance/Poisson/Trace
#3rd param: the rhythm param,
#           1.when use the rhythm of balance, the parameter is treated as the requesting count per second
#           2.when use the rhythm of possion, the parameter is treated as the expected period(millisecond) of a poisson process
#           3.when use the rhythm of trace, the parameter is treated as the fileName in conf directory
#4th param: the popularity(content) that will be sent: Even/Zipf/Trace
#5th param: the popularity param,
#           1.when use Even, this is set to  be null;
#           2.when use Zipf, this is set to  be Zipf param;
#           3.when use Trace, this is set to  be null;
#6th param: the granularity to report(in second)
300
Balance
5
Even
null
2